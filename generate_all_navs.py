# python/generate_all_navs.py
import xml.etree.ElementTree as ET
from pathlib import Path
import re
import sys
from collections import defaultdict
import pprint

NAMESPACES = {
    "": "https://w3id.org/xapi/profiles/cmi5/v1/CourseStructure.xsd",
    "bec": "https://cmi5extension.benchmarkuniverse.com/cmi5/BecPlayerExtension.xsd",
}

TITLE_SUBS = {
    "Multimodal Minilesson pt1": "Introduce Part 1",
    "Multimodal Minilesson pt2": "Introduce Part 2",
    "Multimodal Minilesson pt3": "Introduce Part 3",
    "Multimodal Minilesson pt4": "Introduce Part 4",
    "Multimodal Minilesson pt5": "Introduce Part 5",
    "Read Aloud Card": "Display Read Aloud Card",
    "Write to Deepen Comprehension: Retelling": "Write to Deepen Comprehension",
    "Review Letters": "Review Phonics Cards",
    "Review Words": "Review Word Cards",
    "Read: Why Aren’t All Bird Beaks the Same?": "Introduce",
    "Introduce": "Introduce",
}

SECTION_SUBS = {
    "Multimodal Minilesson": "Multimodal Mini-Lessons",
    "Warm-up: Review and Repetition": "Warm-Up: Review and Repetition",
    "Warm-up Review and Repetition": "Warm-Up: Review and Repetition",
    "Additional Supports": "Additional Supports",
}


def extract_filename(url: str) -> str:
    return Path(url).name


def extract_level_unit(title: str):
    match = re.search(r"Level\s+(\d+)\s+Unit\s+(\d+)", title)
    return (int(match.group(1)), int(match.group(2))) if match else (None, None)


def strip_template_vars(text: str) -> str:
    return re.sub(r"\{.*?\}", "", text).strip()


def generate_nav_string(xml_path: Path) -> str:
    tree = ET.parse(xml_path)
    root = tree.getroot()

    course_title = root.findtext(".//title/langstring", namespaces=NAMESPACES)
    level, unit = extract_level_unit(course_title or "")
    opener_text = (
        f"Unit {unit} - Lesson 1 Opener" if level and unit else "Lesson Opener"
    )

    nav_blocks = defaultdict(list)

    for block in root.findall(".//block", NAMESPACES):
        raw_section = block.findtext("title/langstring", namespaces=NAMESPACES) or ""
        section_title = SECTION_SUBS.get(
            strip_template_vars(raw_section), strip_template_vars(raw_section)
        )

        for au in block.findall("au", NAMESPACES):
            href = au.findtext("url", namespaces=NAMESPACES)
            raw_label = au.findtext("title/langstring", namespaces=NAMESPACES)
            if not (href and raw_label):
                continue
            label = strip_template_vars(raw_label.strip())
            label = TITLE_SUBS.get(label, label)
            nav_blocks[section_title].append((extract_filename(href), label))

    # Render <nav> HTML string
    lines = []
    lines.append("              <nav>")
    for idx, (section, links) in enumerate(nav_blocks.items()):
        id_attr = ' id="unit_opener_menu_link"' if idx == 0 else ""
        lines.append(f"              <ul{id_attr}>")
        lines.append(f'                <span class="nav-section-name">{section}</span>')
        for href, label in links:
            final_label = (
                opener_text if idx == 0 and label == "Lesson Opener" else label
            )
            lines.append(f'                <a class="nav-link" href="{href}">')
            lines.append(f"                  <li>{final_label}</li>")
            lines.append(f"                </a>")
        lines.append(f"              </ul>\n")
    lines.append("            </nav>")
    return "\n".join(lines)


def build_nav_dict(root_dir: Path) -> dict:
    nav_map = {}
    for xml_file in root_dir.rglob("*.xml"):
        try:
            nav_string = generate_nav_string(xml_file)
            nav_map[xml_file.name] = nav_string
        except Exception as e:
            print(f"[error] {xml_file}: {e}")
    return nav_map


def save_nav_dict_py(nav_dict: dict, output_path: Path):
    with output_path.open("w", encoding="utf-8") as f:
        f.write("# Autogenerated nav dictionary\n")
        f.write("nav_map = ")
        pprint.pprint(nav_dict, stream=f, width=120)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python generate_all_navs.py data/xml [output_file.py]")
        sys.exit(1)

    root_path = Path(sys.argv[1])
    if not root_path.exists():
        print(f"[error] Directory does not exist: {root_path}")
        sys.exit(1)

    output_file = (
        Path(sys.argv[2]) if len(sys.argv) >= 3 else Path("all_navs_outputxxx.py")
    )

    nav_dict = build_nav_dict(root_path)
    save_nav_dict_py(nav_dict, output_file)
    print(f"[✓] Saved nav_map with {len(nav_dict)} entries to {output_file}")
